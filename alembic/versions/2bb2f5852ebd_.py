"""empty message

Revision ID: 2bb2f5852ebd
Revises: 
Create Date: 2024-08-07 02:11:32.542011

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2bb2f5852ebd'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('access_lvl', sa.Integer(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )

    op.create_table('competition',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('image', sa.String(), nullable=False),
    sa.Column('published', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('competition_item',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('competition_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('videoId', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # Explicitly create the unique constraint
    op.create_unique_constraint('uq_competition_item_id_videoId', 'competition_item', ['competition_id', 'videoId'])

    op.create_table('rating',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('competition_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('ended', sa.Boolean(), nullable=False),
    sa.Column('prev_choice_id', sa.UUID(), nullable=True),
    sa.Column('cur_choice_id', sa.UUID(), nullable=True),
    sa.Column('stage', sa.Integer(), nullable=False),
    sa.Column('items', postgresql.ARRAY(sa.UUID()), nullable=False),
    sa.Column('is_refreshed', sa.Boolean(), nullable=False),
    sa.Column('is_refreshable', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    op.create_table('rating_choice',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('rating_id', sa.UUID(), nullable=False),
    sa.Column('winner_id', sa.UUID(), nullable=False),
    sa.Column('looser_id', sa.UUID(), nullable=False),
    sa.Column('stage', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # Create foreign keys after tables are created
    op.create_foreign_key('fk_competition_user', 'competition', 'user', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_competition_created_by_user', 'competition', 'user', ['created_by'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_competition_updated_by_user', 'competition', 'user', ['updated_by'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_competition_item_competition', 'competition_item', 'competition', ['competition_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_competition_item_created_by_user', 'competition_item', 'user', ['created_by'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_competition_item_updated_by_user', 'competition_item', 'user', ['updated_by'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_competition', 'rating', 'competition', ['competition_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_user', 'rating', 'user', ['user_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_prev_choice', 'rating', 'rating_choice', ['prev_choice_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_cur_choice', 'rating', 'rating_choice', ['cur_choice_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_created_by_user', 'rating', 'user', ['created_by'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_updated_by_user', 'rating', 'user', ['updated_by'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_choice_rating', 'rating_choice', 'rating', ['rating_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_choice_winner', 'rating_choice', 'competition_item', ['winner_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_choice_looser', 'rating_choice', 'competition_item', ['looser_id'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_choice_created_by_user', 'rating_choice', 'user', ['created_by'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    op.create_foreign_key('fk_rating_choice_updated_by_user', 'rating_choice', 'user', ['updated_by'], ['id'], onupdate='CASCADE', ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('fk_rating_choice_updated_by_user', 'rating_choice', type_='foreignkey')
    op.drop_constraint('fk_rating_choice_created_by_user', 'rating_choice', type_='foreignkey')
    op.drop_constraint('fk_rating_choice_looser', 'rating_choice', type_='foreignkey')
    op.drop_constraint('fk_rating_choice_winner', 'rating_choice', type_='foreignkey')
    op.drop_constraint('fk_rating_choice_rating', 'rating_choice', type_='foreignkey')
    op.drop_constraint('fk_rating_updated_by_user', 'rating', type_='foreignkey')
    op.drop_constraint('fk_rating_created_by_user', 'rating', type_='foreignkey')
    op.drop_constraint('fk_rating_cur_choice', 'rating', type_='foreignkey')
    op.drop_constraint('fk_rating_prev_choice', 'rating', type_='foreignkey')
    op.drop_constraint('fk_rating_user', 'rating', type_='foreignkey')
    op.drop_constraint('fk_rating_competition', 'rating', type_='foreignkey')
    op.drop_constraint('fk_competition_item_updated_by_user', 'competition_item', type_='foreignkey')
    op.drop_constraint('fk_competition_item_created_by_user', 'competition_item', type_='foreignkey')
    op.drop_constraint('fk_competition_item_competition', 'competition_item', type_='foreignkey')
    op.drop_constraint('fk_competition_updated_by_user', 'competition', type_='foreignkey')
    op.drop_constraint('fk_competition_created_by_user', 'competition', type_='foreignkey')
    op.drop_constraint('fk_competition_user', 'competition', type_='foreignkey')
    op.drop_constraint('uq_competition_item_id_videoId', 'competition_item', type_='unique')
    op.drop_table('rating_choice')
    op.drop_table('rating')
    op.drop_table('competition_item')
    op.drop_table('competition')
    op.drop_table('user')
    # ### end Alembic commands ###
